/*
 * This program and the accompanying materials are made available under the terms of the
 * Eclipse Public License v2.0 which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-v20.html
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Copyright Contributors to the Zowe Project.
 */

node('zowe-jenkins-agent') {
    def lib = library("jenkins-library").org.zowe.jenkins_shared_library

    def pipeline = lib.pipelines.generic.GenericPipeline.new(this)

    pipeline.admins.add("jackjia")

    // run the build every day between 1am ~ 7am
    def isMasterBranch = env && env.BRANCH_NAME == 'master'
    if (isMasterBranch) {
        pipeline.addBuildOption(pipelineTriggers([cron('H H(1-6) * * *')]))
    }

    pipeline.setup(
        packageName: 'org.zowe',
        artifactory: [
            url                        : lib.Constants.DEFAULT_LFJ_ARTIFACTORY_URL,
            // to gain write permission
            usernamePasswordCredential : 'zowe.jfrog.io-jack',
        ]
    )

    pipeline.createStage(
        name          : "Artifactory Nightly Builds",
        isSkippable   : true,
        stage         : {
            dir('artifactory-tools') {
                sh "./clean-nightly.sh -a ${pipeline.artifactory.CLI_CONFIG_NAME}"
            }
        },
        timeout: [time: 20, unit: 'MINUTES']
    )

    pipeline.createStage(
        name          : "Artifactory Snapshot Builds",
        isSkippable   : true,
        stage         : {
            dir('artifactory-tools') {
                sh "./clean-snapshots.sh -a ${pipeline.artifactory.CLI_CONFIG_NAME}"
            }
        },
        timeout: [time: 40, unit: 'MINUTES']
    )

    pipeline.createStage(
        name          : "Marist z/OS",
        isSkippable   : true,
        stage         : {
            def serverCredentials = [
                'marist-1': ['ssh-marist-server-zzow01-hostport', 'ssh-marist-server-zzow01'],
                'marist-2': ['ssh-marist-server-zzow02-hostport', 'ssh-marist-server-zzow02'],
                'marist-3': ['ssh-marist-server-zzow03-hostport', 'ssh-marist-server-zzow03'],
            ]
            
            serverCredentials.each { host, creds ->
                withCredentials([
                    usernamePassword(
                        credentialsId: creds[0],
                        passwordVariable: "SSH_PORT",
                        usernameVariable: "SSH_HOST"
                    ),
                    usernamePassword(
                        credentialsId: creds[1],
                        passwordVariable: "SSH_PASSWORD",
                        usernameVariable: "SSH_USER"
                    )
                ]) {
                    sh "sshpass -p \"${SSH_PASSWORD}\" scp -P ${SSH_PORT} -o StrictHostKeyChecking=no -o PubkeyAuthentication=no scripts/cleanup-zos.sh ${SSH_USER}@${SSH_HOST}:/tmp/cleanup-zos.sh"

                    sh """SSHPASS=${SSH_PASSWORD} sshpass -e ssh -tt -o StrictHostKeyChecking=no -o PubkeyAuthentication=no -p ${SSH_PORT} ${SSH_USER}@${SSH_HOST} << EOF
cd /tmp && chmod +x cleanup-zos.sh && ./cleanup-zos.sh
echo "done" && exit 0
EOF"""
                }
            }
        },
        timeout: [time: 20, unit: 'MINUTES']
    )

    pipeline.createStage(
        name          : "Marist zLinux",
        isSkippable   : true,
        stage         : {
            def serverCredentials = [
                'zlinux-1': ['zlinux-host', 'zlinux-docker'],
            ]
            
            serverCredentials.each { host, creds ->
                withCredentials([
                    string(
                        credentialsId: creds[0],
                        variable: 'SSH_HOST'
                    ),
                    sshUserPrivateKey(
                        credentialsId: creds[1],
                        keyFileVariable: 'SSH_KEYFILE',
                        usernameVariable: 'SSH_USER',
                        passphraseVariable: 'SSH_PASSPHRASE'
                    )
                ]) {

                    sh "SSHPASS=${SSH_PASSPHRASE} sshpass -e -P 'passphrase for key' scp -P 22 -o StrictHostKeyChecking=no -o LogLevel=QUIET -i '${SSH_KEYFILE}' scripts/cleanup-zlinux.sh ${SSH_USER}@${SSH_HOST}:/tmp/cleanup-zlinux.sh"

                    sh """SSHPASS=${SSH_PASSPHRASE} sshpass -e -P 'passphrase for key' ssh -tt -o StrictHostKeyChecking=no -o LogLevel=QUIET -p 22 -i '${SSH_KEYFILE}' ${SSH_USER}@${SSH_HOST} << EOF
cd /tmp && chmod +x cleanup-zlinux.sh && ./cleanup-zlinux.sh
echo "done" && exit 0
EOF"""
                }
            }
        },
        timeout: [time: 20, unit: 'MINUTES']
    )

    pipeline.end()
}