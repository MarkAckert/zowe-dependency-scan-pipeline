#!groovy

/**
 * This program and the accompanying materials are made available under the terms of the
 * Eclipse Public License v2.0 which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-v20.html
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Copyright IBM Corporation 2020
 */


node('ibm-jenkins-slave-dind') {
  // Test server configurations:
  // - credential id for ssh server hostname and port
  // - credential id for ssh username and password
  Map TEST_SERVERS = [
    'marist': [
      ssh_hostport     : 'ssh-marist-server-zzow01-hostport',
      ssh_userpass     : 'ssh-marist-server-zzow01',
    ],
    'marist-2': [
      ssh_hostport     : 'ssh-marist-server-zzow02-hostport',
      ssh_userpass     : 'ssh-marist-server-zzow02'
    ],
    'marist-3': [
      ssh_hostport     : 'ssh-marist-server-zzow03-hostport',
      ssh_userpass     : 'ssh-marist-server-zzow03'
    ],
    // 'river': [
    //   ssh_hostport     : 'ssh-river-original-hostport',
    //   ssh_userpass     : 'ssh-zdt-test-image-guest'
    // ],
    'river-3': [
      ssh_hostport     : 'ssh-river-c3-hostport',
      ssh_userpass     : 'ssh-zdt-test-image-guest'
    ]
  ];

  def lib = library("jenkins-library").org.zowe.jenkins_shared_library

  def pipeline = lib.pipelines.nodejs.NodeJSPipeline.new(this)

  pipeline.admins.add("jackjia")

  // we have extra parameters for integration test
  pipeline.addBuildParameters(
    booleanParam(
      name: 'STARTED_BY_AUTOMATION',
      description: 'If this task is started with pipeline automation. Set to true if you want to skip the Continue prompt question.',
      defaultValue: false
    ),
    // >>>>>>>> parameters of where and what to test
    choice(
      name: 'TEST_SERVER',
      choices: TEST_SERVERS.keySet().collect(),
      description: 'Choose which server to run test',
      trim: true
    ),
    string(
      name: 'TEST_SCOPE',
      description: 'Test cases to be executed',
      defaultValue: 'dist/__tests__/default/idle/',
      trim: true,
      required: true
    ),
    // >>>>>>>> parameters of artifactory
    string(
      name: 'ZMS_ARTIFACTORY_PATTERN',
      description: 'Zowe metrics server artifactory download pattern',
      defaultValue: 'libs-snapshot-local/org/zowe/metrics-server/*.pax',
      trim: true,
      required: true
    ),
    string(
      name: 'ZMS_ARTIFACTORY_BUILD',
      description: 'Zowe artifactory download build',
      defaultValue: 'Zowe Performance - Metrics Server :: master',
      trim: true
    ),
    // >>>>>>>> parametters for test cases
    string(
      name: 'PERFORMANCE_TEST_DEBUG_INFORMATION',
      description: 'How to show debug logging for running performance test cases.',
      defaultValue: 'zowe-performance-test:*',
      trim: true
    )
  )

  pipeline.setup(
    packageName    : 'org.zowe.performance-test-reports',
    baseDirectory  : 'performance/client',
    nodeJsVersion  : 'v12.18.3',
    initWithColor  : true,
    auditWithColor : true,
    lintWithColor  : true
  )

  pipeline.build(displayAnsiColor: true)

  pipeline.createStage(
    name          : "Prepare ZMS",
    isSkippable   : true,
    stage         : {
      // download ZMS
      pipeline.artifactory.download(
        specContent : """
{
  "files": [{
    "pattern": "${params.ZMS_ARTIFACTORY_PATTERN}",
    "target": ".tmp/zms/",
    "flat": "true",
    "build": "${params.ZMS_ARTIFACTORY_BUILD}"
  }]
}
""",
        expected    : 1
      )

      // transfer to the server

      // start ZMS
    },
    timeout: [time: 20, unit: 'MINUTES']
  )

  pipeline.test(
    name          : 'Test',
    operation     : {
      withCredentials([
        usernamePassword(
          credentialsId: TEST_SERVERS[params.TEST_SERVER]['ssh_hostport'],
          passwordVariable: "SSH_PORT",
          usernameVariable: "SSH_HOST"
        ),
        usernamePassword(
          credentialsId: TEST_SERVERS[params.TEST_SERVER]['ssh_userpass'],
          passwordVariable: "SSH_PASSWORD",
          usernameVariable: "SSH_USER"
        )
      ]) {
        def testEnvVars = [
          "DEBUG=${params.PERFORMANCE_TEST_DEBUG_INFORMATION}".toString(),
          "ZMS_HOST=${SSH_PORT}".toString(),
          "ZMS_PORT=19000",
          "TARGET_HOST=${SSH_PORT}".toString(),
          "TARGET_PORT=7554",
          "TEST_AUTH_USER=${SSH_USER}".toString(),
          "TEST_AUTH_PASSWORD=${SSH_PASSWORD}".toString(),
        ]
        withEnv(testEnvVars) {
          pipeline.nvmShell("npm run test")

          sh "ls -la reports"
        }
      }
    },
    allowMissingJunit : true,
    displayAnsiColor  : true
  )

  // define we need publish stage
  pipeline.publish(
    operation: {
      echo "Default npm publish will be skipped."
    },
    artifacts: [
      "reports/*.yml"
    ]
  )

  pipeline.end(
    always: {
      // shutdown ZMS
    }
  )
}
