#!groovy

/**
 * This program and the accompanying materials are made available under the terms of the
 * Eclipse Public License v2.0 which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-v20.html
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Copyright IBM Corporation 2019
 */

def opts = []
// keep last 5 builds for regular branches, no keep for pull requests
opts.push(buildDiscarder(logRotator(numToKeepStr: '5')))
// disable concurrent build
opts.push(disableConcurrentBuilds())
// run every night 11pm EST
// opts.push(pipelineTriggers([cron('''TZ=America/New_York
// H 22 * * *''')]))
// set build properties
properties(opts)

node('zowe-oss-ibm-jenkins-slave-nvm') {
  currentBuild.result = 'SUCCESS'
  def EMAIL_RECIPIENTS = "jackjia.ibm@gmail.com"

try {
  stage ('WICKED Scan') {
    def GITHUB_SSH_KEY = "zowe-oss-zlux-jenkins"
    // check staging branch if exists
    def DEFAULT_BRANCH = "staging"
    def WICKED_WORKDIR = "/home/jenkins/.wicked"
    def initZluxPlugin = {
      sshagent(credentials: [GITHUB_SSH_KEY]) {
        sh """
        rm -f /home/jenkins/.npmrc
        packages=\$(find . -name package.json | { grep -v node_modules || true; })
        for package in \$packages
        do
            sh -c "cd `dirname \$package` && pwd && npm install --no-audit"
        done
        """
      }
    }
    def initExplorerPlugin = {
      sh """
      cp /home/jenkins/.npmrc-explorer /home/jenkins/.npmrc
      if [ -f "package-lock.json" ]; then
        npm ci --no-audit
      else
        npm install --no-audit
      fi
      """
    }
    def initCliProject = {
      sh """
      cp /home/jenkins/.npmrc-cli /home/jenkins/.npmrc
      npm install --no-audit
      """
    }
    def initCliPluginProject = {
      sh """
      rm -f /home/jenkins/.npmrc
      npm config set @brightside:registry https://api.bintray.com/npm/ca/brightside
      npm install --no-audit
      npm install --save @brightside/imperative@lts-incremental
      """
    }
    def initGradleExplorerProject = {
      sh """
      cat >> build.gradle <<EOT

task copyDependencyJarsForScan << {
    file("build/dependency-jars").deleteDir()
    subprojects.findAll().each { project ->
        println project.configurations.compileClasspath
        copy {
            from project.jar
            from project.configurations.runtime
            from project.configurations.testCompileClasspath
            into "build/dependency-jars"
        }
    }
}
EOT
      [ -f "bootstrap_gradlew.sh" ] && ./bootstrap_gradlew.sh
      ./gradlew assemble && ./gradlew copyDependencyJarsForScan
      """
    }
    def initGradleApimlProject = {
      sh """
      git fetch --unshallow
      cat >> build.gradle <<EOT

task copyDependencyJarsForScan << {
    subprojects.findAll().each { project ->
        println project.configurations.compileClasspath
        copy {
            from project.jar
            from project.configurations.runtime
            from project.configurations.testCompileClasspath
            into "./"
        }
    }
}
EOT
      [ -f "bootstrap_gradlew.sh" ] && ./bootstrap_gradlew.sh
      ./gradlew assemble && ./gradlew copyDependencyJarsForScan

      rm -f /home/jenkins/.npmrc
      packages=\$(find . -name package.json | { grep -v node_modules || true; })
      for package in \$packages
      do
          sh -c "cd `dirname \$package` && pwd && npm install --no-audit"
      done
      """
    }
    // https://github.com/zowe/zlc/blob/project-tracking/tracking/RepositoryTracking.md
    def allRepositories = [
      "zlux-app-manager": [
        "init": initZluxPlugin,
        "branch": 'v1.3.0',
      ],
      "zlux-app-server": [
        init: initZluxPlugin,
        "branch": "v1.3.0",
      ],
      "zlux-file-explorer": [
        init: initZluxPlugin,
        branch: "v1.0.0",
      ],
      "zlux-grid": [
        init: initZluxPlugin,
        branch: "v0.0.5",
      ],
      "zlux-platform": [
        init: initZluxPlugin,
        "branch": "v1.3.0",
      ],
      "zlux-server-framework": [
        init: initZluxPlugin,
        "branch": "v1.3.0",
      ],
      "zlux-shared": [
        init: initZluxPlugin,
        "branch": "v1.3.0",
      ],
      "zlux-widgets": [
        init: initZluxPlugin,
        "branch": "v0.0.3",
      ],
      "sample-angular-app": [
        init: initZluxPlugin,
        "branch": "v1.3.0",
      ],
      "sample-iframe-app": [
        init: initZluxPlugin,
        "branch": "v1.3.0",
      ],
      "sample-react-app": [
        init: initZluxPlugin,
        "branch": "v1.3.0",
      ],
      "tn3270-ng2": [
        init: initZluxPlugin,
        "branch": "v1.3.0",
      ],
      "vt-ng2": [
        init: initZluxPlugin,
        "branch": "v1.3.0",
      ],
      "zlux-editor": [
        init: initZluxPlugin,
        "branch": "v1.3.0",
      ],
      "zlux-workflow": [
        init: initZluxPlugin,
        "branch": "v1.3.0",
      ],
      "zosmf-auth": [
        init: initZluxPlugin,
        "branch": "v1.3.0",
      ],
      "zss-auth": [
        init: initZluxPlugin,
        "branch": "v1.3.0",
      ],
      "zss": [
        "branch": "v1.2.0",
      ],
      "zowe-common-c" : [
        "branch": "zss-v1.3.0",
      ],

      "explorer-jes": [
        "init": initExplorerPlugin,
        "branch": "v0.0.21",
      ],
      "explorer-mvs": [
        init: initExplorerPlugin,
        "branch": "v0.0.15",
      ],
      "explorer-uss": [
        init: initExplorerPlugin,
        "branch": "v0.0.13",
      ],
      "explorer-ui-server": [
        init: initExplorerPlugin,
        "branch": "v0.2.8",
      ],
      "orion-editor-component": [
        init: initExplorerPlugin,
        "branch": "v0.0.9",
      ],

      "data-sets": [
        "init": initGradleExplorerProject,
        "src": "build/dependency-jars",
        "branch": "v0.2.2",
      ],
      "jobs": [
        "init": initGradleExplorerProject,
        "src": "build/dependency-jars",
        "branch": "v0.2.4",
      ],
      "explorer-api-common": [
        "init": initGradleExplorerProject,
        "src": "build/dependency-jars",
        "branch": "0.3.2",
      ],

      "api-layer": [
        "init": initGradleApimlProject,
        "branch": "v1.1.5",
      ],

      "imperative": [
        "branch": "v2.4.8",
        "init": initCliProject,
      ],
      "zowe-cli": [
        "branch": "v2.28.2",
        "init": initCliProject,
      ],
      "zowe-cli-db2-plugin": [
        "branch": "v2.1.0",
        "init": initCliPluginProject,
      ],
      "zowe-cli-cics-plugin": [
        "branch": "v1.0.0",
        "init": initCliPluginProject,
      ],
    ]
    def allRepositoriesSize = allRepositories.size()

    echo "###############################################################################"
    echo "#                                     PREPARE                                 #"
    echo "###############################################################################"
    echo ">>>>>>>>>>>>>>>>>>>>>>>>> Preparing WICKED working folder ..."
    sh """
    set +x
    if [ ! -d "$WICKED_WORKDIR" ]; then
      mkdir -p $WICKED_WORKDIR
      chmod 777 $WICKED_WORKDIR
    fi
    if [ ! -d "$WICKED_WORKDIR/data" ]; then
      mkdir -p "$WICKED_WORKDIR/data"
      chmod 777 "$WICKED_WORKDIR/data"
    fi
    if [ -d "$WICKED_WORKDIR/workspace" ]; then
      rm -fr "$WICKED_WORKDIR/workspace"
    fi
    if [ -d "$WICKED_WORKDIR/workspace@tmp" ]; then
      rm -fr "$WICKED_WORKDIR/workspace@tmp"
    fi
    mkdir -p "$WICKED_WORKDIR/workspace"
    chmod 777 "$WICKED_WORKDIR/workspace"
    if [ -d "$WICKED_WORKDIR/reports" ]; then
      rm -fr "$WICKED_WORKDIR/reports"
    fi
    mkdir -p "$WICKED_WORKDIR/reports"
    chmod 777 "$WICKED_WORKDIR/reports"
    echo \$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ") >"$WICKED_WORKDIR/reports/REPORT-DATE"
    if [ -d "$WICKED_WORKDIR/logs" ]; then
      rm -fr "$WICKED_WORKDIR/logs"
    fi
    mkdir -p "$WICKED_WORKDIR/logs"
    chmod 777 "$WICKED_WORKDIR/logs"
    """
    echo ">>>>>>>>>>>>>>>>>>>>>>>>> Preparing private npmrc ..."
    def npmCredentialWicked = 'zowe-oss-wicked-artifactory'
    def npmCredentialUP = 'zowe-oss-zowe-artifactory'
    def npmCredentialToken = 'zowe-oss-zowe-artifactory-token'
    def npmEmail = 'giza-jenkins@gmail.com'
    def npmRegistry = 'https://gizaartifactory.jfrog.io/gizaartifactory/api/npm/npm-release/'
    def npmRegistryWicked = 'https://na.artifactory.swg-devops.com/artifactory/api/npm/wicked-npm-local/'
    withCredentials([
        usernamePassword(
            credentialsId: npmCredentialUP,
            passwordVariable: 'PASSWORD',
            usernameVariable: 'USERNAME'
        )
    ]) {
        List<String> configEntries = ['set +x']
        // cli - only @zowe scope
        configEntries.push("rm -f /home/jenkins/.npmrc")
        configEntries.push("curl -u \${USERNAME}:\${PASSWORD} ${npmRegistry}auth/zowe > /home/jenkins/.npmrc-cli")
        sh configEntries.join("\n")
    }
    withCredentials([
        string(
            credentialsId: npmCredentialToken,
            variable: 'TOKEN'
        )
    ]) {
        List<String> configEntries = ['set +x']
        // explorers - global auth to private
        configEntries.push("npm config set _auth \${TOKEN}")
        configEntries.push("npm config set email ${npmEmail}")
        configEntries.push("npm config set always-auth true")
        configEntries.push("npm config set registry ${npmRegistry}")
        configEntries.push("mv /home/jenkins/.npmrc /home/jenkins/.npmrc-explorer")
        sh configEntries.join("\n")
    }
    withCredentials([
        usernamePassword(
            credentialsId: npmCredentialWicked,
            passwordVariable: 'PASSWORD',
            usernameVariable: 'USERNAME'
        )
    ]) {
        List<String> configEntries = ['set +x']
        // cli - only @zowe scope
        configEntries.push("rm -f /home/jenkins/.npmrc")
        configEntries.push("curl -u \${USERNAME}:\${PASSWORD} ${npmRegistryWicked}auth/wicked > /home/jenkins/.npmrc-wicked")
        sh configEntries.join("\n")
    }
    echo ">>>>>>>>>>>>>>>>>>>>>>>>> Installing WICKED CLI ..."
    sh 'mv /home/jenkins/.npmrc-wicked /home/jenkins/.npmrc && npm install @wicked/cli -g'
    echo ">>>>>>>>>>>>>>>>>>>>>>>>> Trust github.com ..."
    sh """
    set +x
    mkdir -p ~/.ssh && chmod 700 ~/.ssh && touch ~/.ssh/known_hosts
    sed -i "/github.com/d" ~/.ssh/known_hosts || true
    line=\$(ssh-keyscan github.com,`ping -c 1 github.com | head -1 | awk -F "(" '{print \$2}' | awk -F ")" '{print \$1}'`)
    echo \$line >> ~/.ssh/known_hosts
    """

    echo "###############################################################################"
    echo "#                             CHECKOUT & SCAN                                 #"
    echo "###############################################################################"
    def index = 0
    allRepositories.each { repo, rc ->
      index += 1
      def branch = rc.containsKey('branch') ? rc.branch : DEFAULT_BRANCH
      try {
        echo "==============================================================================="
        echo ">>>>>>>>>>>>>>>>>>>>>>>>> Checkout ${index}/${allRepositoriesSize} ${repo} ..."
        def cloneCmd = "git clone --depth 1  --single-branch --branch \"${branch}\" https://github.com/zowe/${repo}"
        dir("$WICKED_WORKDIR/workspace") {
          sh "rm -fr ${repo} && ${cloneCmd}"
        }

        echo "==============================================================================="
        echo ">>>>>>>>>>>>>>>>>>>>>>>>> Prepare report folder for ${repo} ..."
        sh "set +x\nmkdir -p \"${WICKED_WORKDIR}/reports/${repo}\" && chmod -R 777 \"${WICKED_WORKDIR}/reports/${repo}\" && ln -s \"${WICKED_WORKDIR}/reports/${repo}\""

        dir("$WICKED_WORKDIR/workspace/${repo}") {
          def commit = sh(script: 'git rev-parse HEAD', returnStdout: true).trim()
          sh "echo \"${commit}\" > \"${WICKED_WORKDIR}/reports/${repo}/COMMIT\""

          if (rc.containsKey('init')) {
            echo "==============================================================================="
            echo ">>>>>>>>>>>>>>>>>>>>>>>>> Preparing for ${repo} ..."
            rc['init']()
          }
        }

        echo "==============================================================================="
        echo ">>>>>>>>>>>>>>>>>>>>>>>>> Scanning ${repo} ..."
        def src = "${WICKED_WORKDIR}/workspace/${repo}"
        if (rc.containsKey('src')) {
          src += "/${rc['src']}"
        }
        timeout(time: 180, unit: 'MINUTES') {
          sh """
set +x
echo ">>>> started at \$(date)"
wicked-cli \
  -s "${src}" \
  -o "${WICKED_WORKDIR}/reports/${repo}" \
  -p "${repo}"
if [ -f "${WICKED_WORKDIR}/reports/${repo}/${repo}_scan-results/Scan-Report.json" ]; then
  mv ${WICKED_WORKDIR}/reports/${repo}/${repo}_scan-results/* ${WICKED_WORKDIR}/reports/${repo}/
  rmdir ${WICKED_WORKDIR}/reports/${repo}/${repo}_scan-results
fi
echo "<<<< ended at \$(date)"
"""
        }
      } catch (ep) {
        echo "==============================================================================="
        echo "[ERROR] processing ${repo}: ${ep}"
        if (!fileExists("${WICKED_WORKDIR}/reports/${repo}/${repo}_scan-results/Scan-Report.json") &&
          !fileExists("${WICKED_WORKDIR}/reports/${repo}/Scan-Report.json")) {
          echo ">>>>>>>>>>>>>>>>>>>>>>>>> Removing empty report folder ..."
          sh "rm -fr \"${WICKED_WORKDIR}/reports/${repo}\""
        }

        // manually aborted: hudson.AbortException: script returned exit code 143
        if ("${ep}".contains('hudson.AbortException: script returned exit code 143')) {
          error "Build aborted"
        }

        mail body: "Job \"${env.JOB_NAME}\" build #${env.BUILD_NUMBER} failed on ${repo}.\n\nError: ${ep}\n\nCheck detail: ${env.BUILD_URL}" ,
            subject: "[Jenkins] Job \"${env.JOB_NAME}\" build #${env.BUILD_NUMBER} failed on ${repo}",
            to: EMAIL_RECIPIENTS

        currentBuild.result = 'UNSTABLE'
      }
    }

    echo "###############################################################################"
    echo "#                                     PUBLISH                                 #"
    echo "###############################################################################"
    def GITHUB_USER_EMAIL = 'zowe.robot@gmail.com'
    def GITHUB_USER_NAME = 'Zowe Robot'
    def GITHUB_CREDENTIALS = 'zowe-oss-github-zowe-robot'
    def GITHUB_REPOSITORY = 'zowe/community-ghsa-j4hx-p5p2-r92q'
    def PUBLISH_BRANCH = 'wicked'
    withCredentials([usernamePassword(
      credentialsId: GITHUB_CREDENTIALS,
      passwordVariable: 'GIT_PASSWORD',
      usernameVariable: 'GIT_USERNAME'
    )]) {
      sh """
git config --global user.email \"${GITHUB_USER_EMAIL}\"
git config --global user.name \"${GITHUB_USER_NAME}\"
git config --global credential.helper store
echo "https://\${GIT_USERNAME}:\${GIT_PASSWORD}@github.com\" > ~/.git-credentials
mkdir -p .deploy
cd .deploy
git init
git remote add origin https://github.com/${GITHUB_REPOSITORY}.git
git fetch
git checkout -B ${PUBLISH_BRANCH}
if [ -n "\$(git ls-remote --heads origin ${PUBLISH_BRANCH})" ]; then git pull origin ${PUBLISH_BRANCH}; fi
mkdir -p WICKED
cd WICKED
cp -r ${WICKED_WORKDIR}/reports/* .
if [ -f "parse-pedigree.sh" ]; then
  ./parse-pedigree.sh
fi
git add -A
git commit -s -m \"deploy from ${env.JOB_NAME}#${env.BUILD_NUMBER}\"
git push 'https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/${GITHUB_REPOSITORY}.git' ${PUBLISH_BRANCH}
"""
    }
  }

  mail body: "Job \"${env.JOB_NAME}\" build #${env.BUILD_NUMBER} succeeded.\n\nCheck detail: ${env.BUILD_URL}" ,
      subject: "[Jenkins] Job \"${env.JOB_NAME}\" build #${env.BUILD_NUMBER} succeeded",
      to: EMAIL_RECIPIENTS

} catch (err) {
  currentBuild.result = 'FAILURE'

  mail body: "Job \"${env.JOB_NAME}\" build #${env.BUILD_NUMBER} failed.\n\nError: ${err}\n\nCheck detail: ${env.BUILD_URL}" ,
      subject: "[Jenkins] Job \"${env.JOB_NAME}\" build #${env.BUILD_NUMBER} failed",
      to: EMAIL_RECIPIENTS

  throw err
} // end of try/catch
}
