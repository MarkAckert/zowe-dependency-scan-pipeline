#!groovy

/**
 * This program and the accompanying materials are made available under the terms of the
 * Eclipse Public License v2.0 which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-v20.html
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Copyright IBM Corporation 2018, 2019
 */


node('zowe-dependency-scanning-rev2') {

  def ZOWE_BRANCH = "v1.8.0"
  def DEPENDENCY_SCAN_HOME = "/home/jenkins/dependency-scan"
  def PENDING_APPROVAL_REPORT_NAME = "dependency_approval_action_aggregates.json"
  def MARKDOWN_REPORT_NAME = "markdown_dependency_report.md"
  def NOTICES_AGGREGATE_FILE = "notices_aggregate.txt"

  def lib = library("jenkins-library").org.zowe.jenkins_shared_library

  def pipeline = lib.pipelines.generic.GenericPipeline.new(this)

  pipeline.admins.add("markackert")

  def registry = lib.npm.Registry.new(this);
  registry.init(
      registry: lib.Constants.DEFAULT_LFJ_NPM_PRIVATE_REGISTRY_INSTALL,
      email: lib.Constants.DEFAULT_LFJ_NPM_PRIVATE_REGISTRY_EMAIL,
      usernamePasswordCredential: lib.Constants.DEFAULT_LFJ_NPM_PRIVATE_REGISTRY_CREDENTIAL
  );
  registry.login();

  pipeline.setup(
    github: [
      email                      : lib.Constants.DEFAULT_GITHUB_ROBOT_EMAIL,
      usernamePasswordCredential : lib.Constants.DEFAULT_GITHUB_ROBOT_CREDENTIAL,
    ]
  );

  pipeline.build(
    name          : "Generate License Report",
    timeout       : [time: 500, unit: 'MINUTES'],
    environment: [
      ZOWE_MANIFEST_BRANCH: "${ZOWE_BRANCH}",
      APP_LICENSE_SCAN: "true",
      APP_NOTICES_SCAN: "true"
    ],
    isSkippable   : false,
    operation     : {
        dir("${DEPENDENCY_SCAN_HOME}") {
            sh "yarn install && yarn build"
            sh "node lib/index.js"
        }
    }
  )

  pipeline.createStage(
      name: "Publish Approvals Required",
      stage: {
          dir("${DEPENDENCY_SCAN_HOME}/build") {
            publishHTML(target: [
                reportName: "Pending Approvals Required",
                allowMissing: true,
                alwaysLinkToLastBuild: true,
                keepAll: true,
                reportDir: "reports",
                reportFiles: "${PENDING_APPROVAL_REPORT_NAME}"
            ])
          }
      }
  )

  pipeline.createStage(
      name: "Publish Dependency Attribution Markdown File",
      stage: {
          dir("${DEPENDENCY_SCAN_HOME}/build") {
            publishHTML(target: [
                reportName: "Pending Dependency Attribution Markdown File",
                allowMissing: true,
                alwaysLinkToLastBuild: true,
                keepAll: true,
                reportDir: "reports",
                reportFiles: "${MARKDOWN_REPORT_NAME}"
            ])
          }
      }
  )

  pipeline.createStage(
      name: "Publish Notices File Required",
      stage: {
          dir("${DEPENDENCY_SCAN_HOME}/build") {
            publishHTML(target: [
                reportName: "Notices",
                allowMissing: true,
                alwaysLinkToLastBuild: true,
                keepAll: true,
                reportDir: "notice_reports",
                reportFiles: "${NOTICES_AGGREGATE_FILE}"
            ])
          }
      }
  )


  pipeline.createStage(
      name: "Publish Logs",
      stage: {
          dir("${DEPENDENCY_SCAN_HOME}/build") {
            archiveArtifacts artifacts: "logs.zip"
          }
      }
  )

  pipeline.end()
}