#!groovy

/**
 * This program and the accompanying materials are made available under the terms of the
 * Eclipse Public License v2.0 which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-v20.html
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Copyright IBM Corporation 2018, 2019
 */


node('zowe-dependency-scanning-revs') {
  def lib = library("jenkins-library").org.zowe.jenkins_shared_library

  def pipeline = lib.pipelines.generic.GenericPipeline.new(this)

  pipeline.addBuildParameters(
    booleanParam(
      name: 'PUBLISH_RELEASE',
      description: 'If we want to publish the licenses as a release.',
      defaultValue: false
    ),
    booleanParam(
      name: 'REPLACE',
      description: 'If you want to overwrite an existing "release".',
      defaultValue: false
    )
  )   

  def ZOWE_BRANCH = "master"
  def DEPENDENCY_SCAN_HOME = "/home/jenkins/dependency-scan"
  def PENDING_APPROVAL_REPORT_NAME = "dependency_approval_action_aggregates.json"
  def MARKDOWN_REPORT_NAME = "markdown_dependency_report.md"
  def NOTICES_AGGREGATE_FILE = "notices_aggregate.txt"

  def ARTIFACT_REPO= "libs-snapshot-local"
  def VERSION = "1.22.0"
  def ARTIFACT_VERSION = "${VERSION}-SNAPSHOT"
  def ARTIFACT_NAME = "zowe_licenses_full-SNAPSHOT.zip"
  def ARTIFACTORY_USER = lib.Constants.DEFAULT_LFJ_ARTIFACTORY_ROBOT_CREDENTIAL

    // if we're publishing a release, change the default repo, version string, and artifact name
  if (params.PUBLISH_RELEASE) {
      ARTIFACT_REPO = "libs-release-local"
      ARTIFACT_VERSION = "${VERSION}"
      ARTIFACT_NAME = "zowe_licenses_full.zip"
  }

  if (params.REPLACE) {
    ARTIFACTORY_USER = "ZoweJfrogDANGEROUS"
  }

  def FULL_ARTIFACT_PATH = "${ARTIFACT_REPO}/org/zowe/licenses/${ARTIFACT_VERSION}/"



  pipeline.admins.add("markackert")

  def registry = lib.npm.Registry.new(this);
  registry.init(
      registry: lib.Constants.DEFAULT_LFJ_NPM_PRIVATE_REGISTRY_INSTALL,
      email: lib.Constants.DEFAULT_LFJ_NPM_PRIVATE_REGISTRY_EMAIL,
      usernamePasswordCredential: lib.Constants.DEFAULT_LFJ_NPM_PRIVATE_REGISTRY_CREDENTIAL
  );
  registry.login();

  pipeline.setup(
    packageName: 'org.zowe',
    version: "${ARTIFACT_VERSION}",
    github: [
      email                      : lib.Constants.DEFAULT_GITHUB_ROBOT_EMAIL,
      usernamePasswordCredential : lib.Constants.DEFAULT_GITHUB_ROBOT_CREDENTIAL,
    ],
    artifactory: [
      url                        : lib.Constants.DEFAULT_LFJ_ARTIFACTORY_URL,
      usernamePasswordCredential : ARTIFACTORY_USER,
    ]
  );

  pipeline.build(
    name          : "Generate License Report",
    timeout       : [time: 500, unit: 'MINUTES'],
    environment: [
      ZOWE_MANIFEST_BRANCH: "${ZOWE_BRANCH}",
      APP_LICENSE_SCAN: "true",
      APP_NOTICES_SCAN: "true"
    ],
    isSkippable   : false,
    operation     : {
        dir("${DEPENDENCY_SCAN_HOME}") {
            sh "yarn install && yarn build"
            sh "node lib/index.js"
            sh "cd build && zip -r logs.zip logs/"
            sh "cd build && zip -r license_reports.zip license_reports/"
            sh "cd build && zip -r notice_reports.zip notice_reports/"
            sh "mkdir -p zowe_licenses"
            sh "ls -lask"
            sh "ls -lask ../"
            sh "cp ../resources/* zowe_licenses/"
            sh "cp build/notice_reports/${NOTICES_AGGREGATE_FILE} zowe_licenses/zowe_full_notices.txt"
            sh "cp build/license_reports/${MARKDOWN_REPORT_NAME} zowe_licenses/zowe_full_dependency_list.md"
            sh "zip -j ${ARTIFACT_NAME} zowe_licenses/*"
        }
    }
  )
  
  pipeline.createStage(
      name: "Archive Logs",
      stage: {
          dir("${DEPENDENCY_SCAN_HOME}/build") {
 //           archiveArtifacts artifacts: "logs.zip"
  //          archiveArtifacts artifacts: "license_reports.zip"
//            archiveArtifacts artifacts: "notice_reports.zip"
    }  
      dir("${DEPENDENCY_SCAN_HOME}"){
              archiveArtifacts artifacts: "${ARTIFACT_NAME}"
      }
    }
  )

  pipeline.createStage(
    name: "Publish Licenses",
    stage: {
      dir("${DEPENDENCY_SCAN_HOME}"){
        def uploadSpec = """{
        "files": [{
          "pattern": "${ARTIFACT_NAME}",
          "target": "${FULL_ARTIFACT_PATH}"
        }]
        }"""
        pipeline.artifactory.upload([specContent: uploadSpec])
      }
    }
  )

  pipeline.end()
}